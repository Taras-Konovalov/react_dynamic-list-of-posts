{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/handleData.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","postId","setPostId","selectOnePost","className","map","post","key","id","userId","body","type","onClick","BASE_URL","getData","endPoint","options","fetch","then","response","ok","Error","status","statusText","json","getPostComments","deleteComment","method","remove","postComment","url","headers","JSON","stringify","NewCommentForm","setComments","useState","name","email","comment","setComment","createNewComment","target","current","value","onSubmit","event","preventDefault","commentsFromServer","data","placeholder","onChange","disabled","Object","values","some","prop","PostDetails","title","selectedPostId","hidden","setHide","comments","useEffect","prepearedComments","filter","length","getUserPosts","defaultProps","App","setPosts","setPost","users","setUsers","fromServer","getAllUsers","query","postsFromServer","user","postFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e54a5d7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, postId, setPostId, selectOnePost }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              {`User #${post.userId}`}\n            </b>\n            {post.body}\n          </div>\n          {postId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => setPostId(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                setPostId(post.id);\n                selectOnePost(post.id);\n              }}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    body: PropTypes.string.isRequired,\n  })).isRequired,\n  postId: PropTypes.number.isRequired,\n  setPostId: PropTypes.func.isRequired,\n  selectOnePost: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport function getData(endPoint, id = '', options) {\n  return fetch(`${BASE_URL}${endPoint}${id}`, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const remove = (endPoint, id = '') => getData(\n  endPoint, id, { method: 'DELETE' },\n);\n\nexport const post = (url, id = '', body) => getData(url, id, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(body),\n});\n","import { getData, remove, post } from './handleData';\n\nexport function getPostComments() {\n  return getData('/comments');\n}\n\nexport function deleteComment(id) {\n  return remove('/comments/', id);\n}\n\nexport function postComment(body) {\n  return post('/comments', '', body);\n}\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\nimport { postComment, getPostComments } from '../../api/comments';\n\nexport const NewCommentForm = ({ postId, setComments }) => {\n  const [comment, setComment] = useState({\n    postId,\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const createNewComment = ({ target }) => {\n    setComment(current => ({\n      ...current,\n      [target.name]: target.value,\n    }));\n  };\n\n  const addNewComment = () => {\n    postComment(comment)\n      .then(getPostComments)\n      .then(commentsFromServer => setComments(commentsFromServer.data));\n  };\n\n  const clearAll = () => {\n    setComment({\n      postId,\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addNewComment();\n        clearAll();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          value={comment.name}\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={createNewComment}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={comment.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={createNewComment}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={comment.body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={createNewComment}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        disabled={Object.values(comment).some(prop => prop === '')}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  setComments: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\nexport const PostDetails = ({ title, selectedPostId }) => {\n  const [hidden, setHide] = useState(false);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    getPostComments()\n      .then(commentsFromServer => setComments(commentsFromServer.data));\n  }, []);\n\n  const prepearedComments = comments\n    .filter(comment => comment.postId === selectedPostId);\n\n  const removeComment = (id) => {\n    deleteComment(id)\n      .then(getPostComments)\n      .then(commentsFromServer => setComments(commentsFromServer.data));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {prepearedComments.length !== 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => (hidden ? setHide(false) : setHide(true))}\n          >\n            {hidden ? (\n              `Show ${prepearedComments.length} comments`\n            ) : (\n              `Hide ${prepearedComments.length} comments`\n            )}\n          </button>\n        )}\n\n        {!hidden && (\n          <ul className=\"PostDetails__list\">\n            {prepearedComments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPostId}\n            setComments={setComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.defaultProps = {\n  title: '',\n};\n\nPostDetails.propTypes = {\n  title: PropTypes.string,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import { getData } from './handleData';\n\nexport function getUserPosts(id = '') {\n  return getData(`/posts/${id}`);\n}\n\nexport function getUserPostsWithQuery(query) {\n  return getData(`/posts?userId=${query}`);\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getUserPosts, getUserPostsWithQuery } from './api/posts';\nimport { getAllUsers } from './api/users';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [post, setPost] = useState({});\n  const [users, setUsers] = useState([]);\n  const [selectedPostId, setPostId] = useState(0);\n\n  useEffect(() => {\n    getUserPosts()\n      .then(fromServer => setPosts(fromServer.data));\n\n    getAllUsers()\n      .then(fromServer => setUsers(fromServer.data));\n  }, []);\n\n  const selectUserPosts = (event) => {\n    const { value } = event.target;\n\n    if (value !== '0') {\n      getUserPostsWithQuery(value)\n        .then(fromServer => setPosts(fromServer.data));\n    }\n\n    if (value === '0') {\n      getUserPosts()\n        .then(postsFromServer => setPosts(postsFromServer.data));\n    }\n  };\n\n  const selectOnePost = (id) => {\n    getUserPosts(id)\n      .then(postFromServer => setPost(postFromServer.data));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectUserPosts}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            postId={selectedPostId}\n            setPostId={setPostId}\n            selectOnePost={selectOnePost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0\n          && (\n            <PostDetails\n              {...post}\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { getData } from './handleData';\n\nexport function getAllUsers(id = '') {\n  return getData(`/users/${id}`);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}